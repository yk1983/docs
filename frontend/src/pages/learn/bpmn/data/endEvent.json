[
    {
        "image" : "/events/end-event-none.jpg",
        "title" : "Non End Event",
        "name" : "None\n(종료 이벤트 기호)",
        "description" : "프로세스의 마지막 단계, 일반적인 종료 이벤트(non end event)를 표현합니다.\n이 표현은 종료 이벤트가 어떠한 결과를 발생하는지를 명시하지 않습니다. 만약 종료 이벤트가 어떠한 결과를 발생하는지를 명시하고자 할 때 내부 심볼을 사용합니다."
    },
    {
        "image" : "/events/end-event-message.jpg",
        "title" : "Message End Event",
        "name" : "Message\n(메세지 기호)",
        "description" : "프로세스의 결과를 참여자에게 메시지로 보냅니다.\n메시지를 수신하는 참여자는 메시지 플로우를 연결함으로써 식별할 수 있습니다."
    },
    {
        "image" : "/events/end-event-error.jpg",
        "title" : "Error End Event",
        "name" : "Error\n(오류 기호)",
        "description" : "프로세스 시작, 중간 또는 끝에서 발견된 오류입니다. 오류 트리거가 있는 이벤트 하위 프로세스는 항상 포함된 프로세스를 중단시킵니다.\n활성화된 모든 서브 프로세스가 종료되며, 에러는 같은 에러코드를 가지거나 가장 근접한 부모 엑티비티에 존재하는 Catch Error Intermediate Event에 의해서 잡을 수 있습니다. 계층구조를 가지고 있는 엑티비티에서 Error Intermediate Event가 없으면 프로세스의 동작이 불명확해지며, 이 경우에는 실행되고 있는 프로세스의 시스템은 추가적으로 에러 처리방법을 정의할 수 있고 일반적으로 프로세스를 종료시킬 수 있습니다."
    },
    {
        "image" : "/events/end-event-escalation.jpg",
        "title" : "Escalation End Event",
        "name" : "Escalation\n(단계적 확대 기호)",
        "description" : "한 단계가 에스컬레이션에 반응하여 조직의 다른 역할로 흘러갑니다. 이 이벤트는 이벤트 하위 프로세스 내에서만 사용됩니다. 에스컬레이션은 조직 내에서 더 높은 책임 수준에 있는 사람이 프로세스에 연관되는 경우 발생합니다.\n다른 활성 스레드는 이것의 영향을받지 않으며 계속 실행됩니다. 같은 에스컬레이션 코드를 가지거나 가장 가까운 부모 엑티비티의 Catch Escalation Intermediate Event가 잡습니다. 만약 계층적인 엑티비티에서 Escalation Intermediate Event가 없으면 프로세스 동작이 불명확해집니다."
    },
    {
        "image" : "/events/end-event-cancel.jpg",
        "title" : "Cancel End Event",
        "name" : "Cancel\n(취소 기호)",
        "description" : "하위 프로세스 내에서 취소된 트랜잭션에 반응합니다. 종료 이벤트에서 취소 기호는 트리거된 프로세스 취소를 나타냅니다.\n트랜잭션 서브 프로세스에서 사용합니다. 트랜잭션이 취소되고 서브 프로세스 경계에 있는 Cancel Intermediate Event가 트리거 될 것임을 표시합니다. TransactionProtocol Cancel Message가 트랜잭션에 관여된 모든 엔티티에게 전송됨을 의미합니다."
    },
    {
        "image" : "/events/end-event-compensation.jpg",
        "title" : "Compensation End Event",
        "name" : "Compensation\n(보상 기호)",
        "description" : "운영이 부분적으로 실패한 경우 트리거되는 환불입니다. Compensation이 필수임을 표시합니다.\n활동이 식별되고 성공적으로 완료되면 해당 활동이 보상됩니다. 보상 종료 이벤트에서 활동을 볼 수 있어야 합니다. 즉, Compensation End Event가 일반적인 흐름 안에 있고 서브프로세스와 동일한 레벨에 있어야 합니다."
    },
    {
        "image" : "/events/end-event-signal.jpg",
        "title" : "Signal End Event",
        "name" : "Signal\n(신호 기호)",
        "description" : "End에 도달하면 신호가 브로드 캐스트됨을 나타냅니다. 신호를 수신 할 수있는 모든 프로세스로 브로드 캐스트되는 신호는 프로세스 레벨 또는 풀을 통해 전송 될 수 있지만 메시지는 아닙니다."
    },
    {
        "image" : "/events/end-event-multiple.jpg",
        "title" : "Multiple End Event",
        "name" : "Multiple\n(복수 기호)",
        "description" : "프로세스를 종료하면 여러 가지 결과가 있음을 의미합니다."
    },
    {
        "image" : "/events/end-event-terminate.jpg",
        "title" : "Terminate End Event",
        "name" : "Terminate\n(종료 기호)",
        "description" : "프로세스 단계의 즉각적인 종료를 트리거합니다. 동시에 모든 관련 인스턴스도 종료됩니다.\n프로세스의 모든 활동이 즉시 종료되어야 함을 나타냅니다. 여기에는 모든 인스턴스가 포함됩니다. 보상 또는 이벤트 처리없이 프로세스가 종료됩니다."
    }
]